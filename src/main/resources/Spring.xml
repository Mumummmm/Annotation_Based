<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 注解注入在XML注入之前进行，因此对于通过这两种方法进行组装的属性后者的配置会覆盖前者-->
    <!-- 跟以前一样，你可以作为单独的bean定义注册他们，但也可以通过在一个基于XML的Spring配置（注入包含上下文命名空间）中
    包含下面的标签来隐式的注册它们-->
    <context:annotation-config/>
    <!-- 隐式注册的后处理器包括AutowiredAnnotationPostProcessor,CommonAnnotationPostProcessor,PersistenceAnnotationPost
    -Processor和前面提到的RequiredAnnotationPostProcessor-->
    <!-- <context:annotation-config/>仅在定义它的同样的应用上下文中寻找注解的beans。这意味着，如果你在一个为
    DispatcherServlet服务的WebApplicationContext中放置了<context:annotation-config/>，它只能在你的控制器中寻找@Autowired
    注解的beans，而不是在你的服务层中。-->

    <!-- @Required注解应用到bean属性的setter方法上，这个注解仅仅表明受影响的bean属性必须在配置时通过显示的bean定义或自动
    组装填充。如果受影响的bean属性没有填充，容器会抛出一个异常，这允许及早明确失败，避免NullPointerException或后面出现类似的
    情况。仍然建议你在bean类本身加入断言，例如，加入到初始化方法中。这样做可以强制这些需要的引用和值，即使是在容器外使用这个
    类。(SimpleMovieLister)-->

    <!-- 在下面的例子中JSR 330的@Inject注解可以用来代替Spring的@Autowired注解-->
    <!-- @Autowired 你可以将@Autowired注解应用到构造函数上。从Spring框架4.3起，如果目标bean仅定义了一个构造函数，那么
    @Autowired注解的构造函数不再是必要的。如果一些构造函数是可获得的，至少有一个必须要加上注解，以便于告诉容器用哪个
    (MovieRecommender)-->
    <!-- 正如预料的那样，你也可以将@Autowired注解应用到传统的setter方法上（SimpleMovieLister）-->
    <!-- 你也可以应用注解到具有任何名字或多个参数的方法上(MovieRecommender)-->
    <!-- 你也可应用@Autowired到字段上，甚至可以与构造函数混用(MovieRecommender)-->
    <!-- 通过给带有数组的字段或方法添加@Autowired注解，也可以从ApplicationContext中提供一组特定类型的bean（MovieRecommender）-->
    <!-- 同样也可以应用到具有同一类型的集合上（MovieRecommender）-->
    <!-- 如果你希望数组或列表中的项按指定顺序排序，你的bean可以实现org.springframework.core.Ordered接口，或使用@Order或标准
    @Priority注解-->
    <!-- 只要期望的key是String类型，那么类型化的Maps就可以自动组装，Map的值将包含所有期望类型的beans，key将包含对应的bean名
    字(MovieRecommender)-->
    <!-- 默认情况下，当没有候选beans可获得时，自动组装会失败；默认的行为是将注解的方法，构造函数额字段看作指明了需要的依赖。
    这个行为也可以通过下面的方式去改变（SimpleMovieLister）-->
    <!-- 每个类只有一个构造函数可以标记为必需的，但可以注解多个非必需的构造函数。在这种情况下，会考虑这些候选者的每一个，
    Spring使用最贪婪的构造函数，即依赖最满足的构造函数，具有最大数目的参数-->
    <!-- 建议在@Required注解之上使用@Autowired的required特性。required特性表明这个属性自动装配是不需要的，如果这个属性不能
    被自动装配，它会被忽略。另一方面，@Required注解是更强大的，在它强制这个属性被任何容器支持的bean设置。如果没有值注入，会
    抛出对应的异常。-->
    <!-- 你也可以对那些已知的具有可解析依赖的接口使用@Autowired：BeanFactory,ApplicationContext,Environment,ResourceLoader
    ApplicationEventPublisher,MessageSource。这些接口和他们的扩展接口，例如ConfigurableApplicationContext或ResourcePattern
    -Resolver,可以自动解析，不需要特别的设置（MovieRecommender）-->
    <!-- @Autowired,@Inject,@Resource,@Value注解是通过SpringBeanPostProcessor实现处理，这反过来意味着你不能在自己的Bean
    -PostProcessor或BeanFactoryPostProcessor中应用这些注解（如果有的话）。这些类型必须显示的通过XML或使用Spring的@Bean方法
    来'wired up'-->

    <!-- 3.9.3 用@Primary微调基于注解的自动装配-->
    <!-- 因为根据类型的自动装配可能会导致多个候选目标，所以在选择过程中进行更多的控制经常是有必要的。一种方式通过Spring的
    @Primary注解来完成。当有个多个候选bean要组装到一个单值的依赖时，@Primary表示指定bean应该具有更高的优先级。假设我们具有
    如下配置，将firstMovieCatalog定义为主要的MovieCatalog。（MovieConfiguration）-->
    <!-- 对应的bean定义如下：-->
    <bean class="com.pansy.MovieCatalog" primary="true"/>
    <bean class="com.pansy.MovieCatalog"/>
    <bean class="com.pansy.CustomerPerferenceDao"></bean>
    <bean id="movieRecommender" class="com.pansy.MovieRecommender"/>
    <!-- 3.9.4 微调基于注解且带有限定符的自动装配-->
    <!-- 当有多个实例需要确定一个主要的候选对象时，@Primary是一种按类型自动装配的有效方式。当需要在选择的过程中进行更多的控制
    时，可以使用Spring的@Qualifier注解。（MovieRecommender）-->
    <!-- @Qualifier注解也可以指定单个构造函数参数或方法参数-->
    <!-- 对应的bean定义如下。限定符值为"main"的bean被组装到有相同值的构造函数参数中-->
    <bean id="main" class="com.pansy.MovieCatalog">
        <!--<qualifier value="main"></qualifier>-->
    </bean>
    <bean class="com.pansy.MovieCatalog">
        <qualifier value="action"></qualifier>
    </bean>
    <!-- 对于回退匹配，bean名字被认为是默认的限定符值。因此你可以定义一个id为main的bean来代替内嵌的限定符元素，会有同样的匹
    配结果。然而，尽管你可以使用这个约定根据名字引用特定的beans，但是@Autowired从根本上来讲是使用可选的语义限定符来进行类型
    驱动注入的。这意味着限定符的值，即使回退到bean名称，总是缩小语义类型匹配的集合；它们没有从语义上将一个引用表达为一个唯一
    的bean id。-->
    <!-- 正如前面讨论的那样，限定符也可以应用到类型结合上，例如，Set<MovieCatalog>。在这个例子中，根据声明的限定符匹配的所有
    beans作为一个集合注入。这意味着限定符不必唯一；它们只是构成过滤标准。例如，你可以定义多个具有同样限定符值"action"的
    MovieCatalog，所有这些都将注入到带有注解@Qualifier("action")的Set<MovieCatalog>中。-->
    <!-- 如果想通过名字表达注解驱动的注入，不要主要使用@Autowired，虽然在技术上能通过@Qualifier值引用一个bean名字。作为可替
    代品，可以使用JSR250@Resource注解，它在语义上被定义为通过组件唯一的名字来识别特定的目标组件，声明的类型与匹配过程无关。
    @Autowired有不同的语义：通过类型选择候选beans，特定的String限定符值被认为只在类型选择的候选目标中，例如，在那些标记为具
    有相同限定符标签的beans中匹配一个"account"的限定符-->
    <!-- @Autowired可以应用到字段，构造函数和多参数方法上，允许通过限定符注解在参数层面上缩减候选目标。相比之下，@Resource
    仅支持字段和bean属性的带有单个参数的setter方法。因此，如果你的注入目标是一个构造参数或一个多参数的方法，坚持使用限定符-->
    <!-- 你可以创建自己的定制限定符注解，简单定义一个注解，在你自己的定义中提供@Qualifier注解（Genre）-->
    <!-- 接下来，提供候选bean定义的信息。你可以添加<qualifier/>标记作为<bean/>标记的子元素，然后指定匹配你的定制限定符注解
    的类型和值。类型用来匹配注解的全限定类名称。或者，没有名称冲突的风险，为了方便，你可以使用简写的类名称。-->
    <bean class="com.pansy.MovieCatalog">
        <qualifier type="com.pansy.Genre" value="Action"/>
    </bean>
    <bean class="com.pansy.MovieCatalog">
        <qualifier type="com.pansy.Genre" value="Comedy"/>
    </bean>
    <!-- 3.10小节类路径扫描和管理组件中，你将看到一个基于注解的替代方法，在XML中提供限定符元数据。特别的，看3.10.8小节，"用
    注解提供限定符元数据"-->
    <!-- 在某些情况下，使用没有值的注解就是足够的。当注解为了通用的目的时，这是非常有用的，可以应用到跨几个不同类型的依赖上。
    例如，当网络不可用时，你可以提供一个要搜索的离线目录。首先定义一个简单的注解：(Offline)-->
    <bean class="com.pansy.MovieCatalog">
        <qualifier type="com.pansy.Offline"></qualifier>
    </bean>
    <!-- 你也可以定义接收命名属性之外的定制限定符注解或代替简单的值属性。如果要注入的字段或参数指定了多个属性值，bean定义必须
    匹配所有的属性值才会被认为是一个可自动装配的候选目标。作为一个例子，考虑下面的注解定义：（MovieQualifier）此例子有问题，
    没找出原因-->
    <bean class="com.pansy.MovieCatalog">
        <qualifier type="com.pansy.MovieQualifier">
            <attribute key="format" value="VHS"/>
            <attribute key="genre" value="Action"/>
        </qualifier>
    </bean>
    <bean class="com.pansy.MovieCatalog">
        <qualifier type="com.pansy.MovieQualifier">
            <attribute key="format" value="VHS"/>
            <attribute key="genre" value="Comedy"/>
        </qualifier>
    </bean>
    <bean class="com.pansy.MovieCatalog">
        <meta key="format" value="DVD"/>
        <meta key="genre" value="Action"/>
    </bean>
    <bean class="com.pansy.MovieCatalog">
        <meta key="format" value="BLURAY"/>
        <meta key="genre" value="Comedy"/>
    </bean>
</beans>